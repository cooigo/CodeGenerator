@* Generator: Template *@
@functions { public dynamic Model { get; set; } }@{
    var dotModule = Model.Module == null ? "" : ("." + Model.Module);
    var moduleDot = Model.Module == null ? "" : (Model.Module + ".");
}
namespace @(Model.RootNamespace)@(dotModule).Entities
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;

    public class @(Model.ClassName)Filter : FilterEntity
    {@foreach (var x1 in Model.Fields){
        <text>
        public @x1.Type @x1.Ident { get; set; }</text>}
        
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append(" 1=1 ");
            @foreach (var x in Model.Fields)
            {
                if (x.Type == "Int32"
                    || x.Type == "Int64"
                    || x.Type == "Decimal"
                    || x.Type == "Boolean"
                    || x.Type == "Single"
                    || x.Type == "Double"
                    || x.Type == "Int16"
                    )
                {<text>
            if (@x.Ident > 0)
            {
                sb.Append(" and @x.Ident=@@@x.Ident ");
            }</text>
                }
                else if (x.Type == "String")
                {<text>
            if (!string.IsNullOrWhiteSpace(@x.Ident))
            {
                sb.Append(" and @x.Ident=@@@x.Ident  ");
            }</text>
                }
                else if (x.Type == "DateTime")
                {<text>
            if (@x.Ident > DateTime.MinValue)
            {
                sb.Append(" and @x.Ident=@@@x.Ident  ");
            }</text>
                }
            }
            return sb.ToString();
        }
    }
}